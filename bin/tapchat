#!/usr/bin/env node

var path    = require('path');
var fs      = require('fs');
var program = require('commander');
var spawn   = require('child_process').spawn;
var running = require('is-running');

var lib = path.join(path.dirname(fs.realpathSync(__filename)), '..', 'lib', 'tapchat');

var Config = require(path.join(lib, 'config'));
var Engine = require(path.join(lib, 'engine'));
var Log    = require(path.join(lib, 'log'));

require('source-map-support').install()

program
  .version(Config.getAppVersion());

program
  .command('start')
  .option('-f, --foreground', 'run in foreground')
  .option('-v, --verbose', 'enable verbose logging')
  .action(function (cmd) {
    if (cmd.verbose) {
      Log.setLevel('silly');
    }

    Config.load(function (config, initial_user) {
      if (cmd.foreground) {
        new Engine(config, initial_user);
        return;
      }

      var pidFile = Config.getPidFile();
      if (fs.existsSync(pidFile)) {
        var pid = parseInt(fs.readFileSync(pidFile));
        if (running(pid)) {
          console.log('TapChat is already running (pid: ' + pid + ').');
          return;
        } else {
          console.log('Removing stale pid file.');
          fs.unlinkSync(pidFile);
        }
      }

      var args = process.argv;
      args.push('-f');

      var node = args.shift(1);

      var out = fs.openSync(Config.getLogFile(), 'a');
      var err = fs.openSync(Config.getLogFile(), 'a');
      var child = spawn(node, args, {
        detached: true,
        stdio: [ 'ignore', out, err ]
      });

      fs.writeFileSync(Config.getPidFile(), child.pid);

      child.unref();

      Log.info('Daemon started successfully with pid: ' + child.pid);
    });
  });

program
  .command('stop')
  .action(function () {
    var pidFile = Config.getPidFile();
    if (!fs.existsSync(pidFile)) {
      console.log('TapChat is not running.');
      return;
    }

    var pid = parseInt(fs.readFileSync(pidFile));
    try {
      process.kill(pid);
      fs.unlinkSync(pidFile);
      console.log('TapChat stopped');
    } catch (error) {
      if (error.code === 'ESRCH') {
        console.log('TapChat is not running (crashed?).');
        fs.unlinkSync(pidFile);
      } else {
        console.log('Unable to stop TapChat. Error:', error.code);
      }
    }
  });

program.parse(process.argv);
