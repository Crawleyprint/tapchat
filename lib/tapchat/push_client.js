// Generated by CoffeeScript 1.7.1
(function() {
  var Base64, ChannelBuffer, ConsoleBuffer, ConversationBuffer, Crypto, Log, NOTIFY_URL, PushClient, Request;

  Crypto = require('crypto');

  Request = require('request');

  Base64 = require('../base64');

  Log = require('./log');

  ConsoleBuffer = require('./console_buffer');

  ChannelBuffer = require('./channel_buffer');

  ConversationBuffer = require('./conversation_buffer');

  NOTIFY_URL = 'https://tapchat.herokuapp.com/notify';

  PushClient = (function() {
    function PushClient(user) {
      this.user = user;
    }

    PushClient.prototype.sendPush = function(message, callback) {
      var body, buffer, ciphertext, connection, info, iv, json, text, title, _ref;
      connection = this.user.findConnection(message.cid);
      buffer = connection.findBuffer(message.bid);
      title = buffer.name;
      text = null;
      if (buffer instanceof ChannelBuffer) {
        text = "<" + message.from + "> " + message.msg;
      } else {
        text = message.msg;
      }
      info = {
        title: title,
        text: text,
        cid: message.cid,
        bid: message.bid
      };
      json = JSON.stringify(info);
      Log.info("Sending push notification: " + json);
      _ref = this.encrypt(this.user.pushKey, json), iv = _ref[0], ciphertext = _ref[1];
      body = {
        id: this.user.pushId,
        message: Base64.urlEncode(ciphertext),
        iv: Base64.urlEncode(iv)
      };
      return Request.post({
        url: NOTIFY_URL,
        form: body
      }, (function(_this) {
        return function(err, response, body) {
          if (err) {
            Log.error("Error sending push notification: " + err);
          } else if (response == null) {
            Log.error("Error sending push notification (no response)");
          } else if (!response.statusCode.toString().match(/^2/)) {
            Log.error("Error sending push notification: " + response.statusCode);
          }
          if (callback) {
            return callback();
          }
        };
      })(this));
    };

    PushClient.prototype.encrypt = function(key, msg) {
      var ciph, cipher, iv;
      iv = Crypto.randomBytes(16);
      cipher = Crypto.createCipheriv('aes-256-cbc', key.toString('binary'), iv.toString('binary'));
      ciph = cipher.update(msg, 'utf8', 'binary');
      ciph += cipher.final('binary');
      return [iv, new Buffer(ciph, 'binary')];
    };

    return PushClient;

  })();

  module.exports = PushClient;

}).call(this);

//# sourceMappingURL=push_client.map
