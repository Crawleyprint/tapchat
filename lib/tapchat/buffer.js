// Generated by CoffeeScript 1.7.1
(function() {
  var B, Buffer, CoffeeScript, EventEmitter, compact, count, del, ends, extend, flatten, last, merge, starts, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  CoffeeScript = require('coffee-script');

  _ref = CoffeeScript.helpers, starts = _ref.starts, ends = _ref.ends, compact = _ref.compact, count = _ref.count, merge = _ref.merge, extend = _ref.extend, flatten = _ref.flatten, del = _ref.del, last = _ref.last;

  B = require('./message_builder');

  _ = require('underscore');

  Buffer = (function(_super) {
    __extends(Buffer, _super);

    function Buffer(connection, info) {
      this.connection = connection;
      this.id = info.bid;
      this.name = info.name;
      this.lastSeenEid = info.last_seen_eid;
      if (!this.connection) {
        throw 'buffer: missing connection';
      }
      if (!this.id) {
        throw 'buffer: missing id';
      }
      if (!this.name) {
        throw 'buffer: missing name';
      }
    }

    Buffer.prototype.getBacklog = function(callback) {
      return this.connection.engine.db.selectEvents(this.id, function(rows) {
        var row;
        rows = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = rows.length; _i < _len; _i++) {
            row = rows[_i];
            _results.push(merge({
              is_backlog: true,
              eid: row.eid,
              time: row.created_at
            }, JSON.parse(row.data)));
          }
          return _results;
        })();
        return callback(rows);
      });
    };

    Buffer.prototype.addEvent = function(event, callback) {
      event.cid = this.connection.id;
      event.bid = this.id;
      return this.connection.engine.db.insertEvent(event, (function(_this) {
        return function(event) {
          _this.emit('event', event);
          if (callback) {
            return callback(event);
          }
        };
      })(this));
    };

    Buffer.prototype.setLastSeenEid = function(eid, callback) {
      return this.connection.engine.db.setBufferLastSeenEid(this.connection.id, this.id, eid, (function(_this) {
        return function() {
          _this.lastSeenEid = eid;
          return callback();
        };
      })(this));
    };

    Buffer.prototype.getIsActive = function() {
      return !this.isArchived;
    };

    return Buffer;

  })(EventEmitter);

  module.exports = Buffer;

}).call(this);

//# sourceMappingURL=buffer.map
