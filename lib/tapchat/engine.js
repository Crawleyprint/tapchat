// Generated by CoffeeScript 1.6.2
(function() {
  var BacklogDB, CoffeeScript, Config, Crypto, DataBuffer, Eco, Engine, Express, Fs, Gzippo, Http, Https, LocalStrategy, Log, Passport, PasswordHash, Path, PushClient, SessionStore, Url, User, Util, WebSocket, WorkingQueue, compact, count, del, ends, extend, flatten, last, merge, starts, _, _ref;

  Path = require('path');

  Fs = require('fs');

  WorkingQueue = require('capisce').WorkingQueue;

  Http = require('http');

  Https = require('https');

  Passport = require('passport');

  LocalStrategy = require('passport-local').Strategy;

  Express = require('express');

  Url = require('url');

  WebSocket = require('faye-websocket');

  PasswordHash = require('password-hash');

  CoffeeScript = require('coffee-script');

  Util = require('util');

  Crypto = require('crypto');

  _ = require('underscore');

  DataBuffer = require('buffer').Buffer;

  Gzippo = require('gzippo');

  Eco = require('eco');

  Log = require('./log');

  Config = require('./config');

  User = require('./user');

  BacklogDB = require('./backlog_db');

  PushClient = require('./push_client');

  SessionStore = require('./session_store');

  _ref = CoffeeScript.helpers, starts = _ref.starts, ends = _ref.ends, compact = _ref.compact, count = _ref.count, merge = _ref.merge, extend = _ref.extend, flatten = _ref.flatten, del = _ref.del, last = _ref.last;

  Engine = (function() {
    function Engine(config, initialUser, callback) {
      var _this = this;

      this.users = [];
      this.port = config.port;
      this.pushId = config.push_id;
      this.pushKey = new DataBuffer(config.push_key, 'base64');
      this.pushClient = new PushClient(this);
      this.db = new BacklogDB(function() {
        if (initialUser) {
          return _this.db.insertUser(initialUser.name, initialUser.password, true, function() {
            return _this.finishLoading(callback);
          });
        } else {
          return _this.finishLoading(callback);
        }
      });
    }

    Engine.prototype.finishLoading = function(callback) {
      var _this = this;

      this.startServer(this.port, callback);
      return this.db.selectUsers(function(users) {
        var userInfo, _i, _len, _results;

        _results = [];
        for (_i = 0, _len = users.length; _i < _len; _i++) {
          userInfo = users[_i];
          _results.push(_this.addUser(userInfo));
        }
        return _results;
      });
    };

    Engine.prototype.startServer = function(port, callback) {
      var _this = this;

      Passport.use(new LocalStrategy(function(username, password, done) {
        return _this.db.selectUserByName(username, function(userInfo) {
          if (userInfo == null) {
            return done(null, false, {
              message: 'Invalid username'
            });
          }
          if (!PasswordHash.verify(password, userInfo.password)) {
            return done(null, false, {
              message: 'Invalid password'
            });
          }
          return done(null, userInfo);
        });
      }));
      this.sessions = new SessionStore(Path.join(Config.getDataDirectory(), 'sessions.json'));
      this.app = Express();
      if (Log.level === 'silly') {
        this.app.use(Express.logger());
      }
      this.app.use(Express.cookieParser());
      this.app.use(Express.bodyParser());
      this.app.use(Express.methodOverride());
      this.app.use(Passport.initialize());
      this.app.use(Express["static"](__dirname + '/../../web'));
      this.app.use(Gzippo.compress());
      this.app.set('views', __dirname + '/../../web');
      this.app.engine('eco', function(path, options, fn) {
        return Fs.readFile(path, 'utf8', function(err, str) {
          if (err) {
            return fn(err);
          }
          str = Eco.render(str, options);
          return fn(null, str);
        });
      });
      this.app.get('/', function(req, res) {
        return res.render('index.html.eco', {
          layout: false
        });
      });
      this.app.post('/login', function(req, res) {
        var auth;

        if (req.body.username == null) {
          req.body.username = 'user';
        }
        auth = Passport.authenticate('local', function(err, user, info) {
          var response, sessionId;

          if (err) {
            return next(err);
          }
          if (!user) {
            response = {
              success: false,
              message: info.message
            };
            res.json(response, 401);
          }
          if (user) {
            sessionId = Crypto.randomBytes(32).toString('hex');
            _this.sessions.set(sessionId, {
              uid: user.uid
            });
            response = {
              success: true,
              session: sessionId,
              user: {
                id: user.uid,
                name: user.name,
                is_admin: user.is_admin === 1
              }
            };
            return res.json(response);
          }
        });
        return auth(req, res);
      });
      this.app.post('/chat/logout', function(req, res) {
        var session_id;

        session_id = req.cookies.session;
        if (!_this.sessions.get(session_id)) {
          req.socket.end('HTTP/1.1 401 Unauthorized\r\n\r\n');
          return next();
        }
        _this.sessions.destroy(session_id);
        return res.json({
          success: true
        });
      });
      this.app.post('/chat/change-password', function(req, res) {
        var newpassword, oldpassword, session;

        session = _this.sessions.get(req.cookies.session);
        if (!session) {
          req.socket.end('HTTP/1.1 401 Unauthorized\r\n\r\n');
          return next();
        }
        oldpassword = req.body.oldpassword;
        newpassword = req.body.newpassword;
        if (!((newpassword != null) && newpassword.length >= 8)) {
          res.json({
            success: false,
            message: 'New password is too short.'
          }, 400);
          return;
        }
        return _this.db.selectUser(session.uid, function(userInfo) {
          if (!PasswordHash.verify(oldpassword, userInfo.password)) {
            res.json({
              success: false,
              message: 'Incorrect old password.'
            }, 400);
            return;
          }
          return _this.db.updateUser(session.uid, {
            password_hash: PasswordHash.generate(newpassword)
          }, function(row) {
            return res.json({
              success: true
            });
          });
        });
      });
      this.app.get('/chat/backlog', function(req, res) {
        var events, session, user;

        session = _this.sessions.get(req.cookies.session);
        if (!session) {
          req.socket.end('HTTP/1.1 401 Unauthorized\r\n\r\n');
          return next();
        }
        user = _this.users[session.uid];
        events = [];
        return user.getBacklog((function(event) {
          return events.push(user.prepareMessage(event));
        }), function() {
          return res.json(events);
        });
      });
      this.web = Https.createServer({
        key: Fs.readFileSync(Config.getCertFile()),
        cert: Fs.readFileSync(Config.getCertFile())
      }, this.app);
      this.web.addListener('upgrade', function(request, socket, head) {
        var res;

        request.method = 'UPGRADE';
        res = new Http.ServerResponse(request);
        return _this.app.handle(request, res, function() {
          var session, user, ws;

          session = _this.sessions.get(request.cookies.session);
          if (session) {
            ws = new WebSocket(request, socket, head);
            user = _this.users[session.uid];
            user.inbandBacklog = request.param('inband', false);
            user.addClient(ws);
            return Log.debug('websocket client: connected');
          } else {
            Log.info('websocket client: unauthorized');
            return request.socket.end('HTTP/1.1 401 Unauthorized\r\n\r\n');
          }
        });
      });
      return this.web.listen(port, function() {
        console.log("\nTapChat ready at https://localhost:" + port + "\n");
        if (callback) {
          return callback(_this);
        }
      });
    };

    Engine.prototype.addUser = function(userInfo) {
      var user;

      user = new User(this, userInfo);
      return this.users[user.id] = user;
    };

    return Engine;

  })();

  module.exports = Engine;

}).call(this);
